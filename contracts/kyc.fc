cell load_accounts_data() {
	cell data = get_data();
	slice ds = data.begin_parse();
	return ds.preload_ref();
}

slice recv_external(slice account) impure {
    (int parsed_account, _) = account.parse_std_addr();
	cell accounts_data = load_accounts_data();
    int action = 0;

    if (action == 0) { ;; init contract 
        ;; throw_unless(32, stored_seqno == 0);
        int provider = 0;
        int fee = 0;
        accept_message();

        cell init_data = begin_cell()
            .store_uint(provider, 256)
            .store_uint(fee, 256)
            .store_dict(new_dict())
            .end_cell();
    
        set_data(init_data);
        return "";
    }

    accept_message();
    (slice status, int success) = accounts_data.udict_get?(256, parsed_account);

	if (success == 0) {
		status = "Under Process";
		accounts_data~udict_set(256, parsed_account, status);
	    set_data(accounts_data);
	}

	return status;
}

() recv_internal(slice account, slice new_status) impure {
    (int parsed_account, _) = account.parse_std_addr();
    cell accounts_data = load_accounts_data();
    accept_message();
    accounts_data~udict_set(256, parsed_account, new_status);
	set_data(accounts_data);
}

slice get_accounts_status(slice account) method_id {
    (int parsed_account, _) = account.parse_std_addr();
	cell accounts_data = load_accounts_data();
	(slice status, int success) = accounts_data.udict_get?(256, parsed_account);
	throw_unless(98, success);

	return status;
}

int get_provider() method_id {
    cell data = get_data();
    slice ds = data.begin_parse();

	return ds.preload_uint(256);
}

int get_fee() method_id {
    cell data = get_data();
    slice ds = data.begin_parse();

	return ds.skip_bits(256).preload_uint(256);
}