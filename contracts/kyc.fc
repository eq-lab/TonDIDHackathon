;; Missed wrapper of DICTGET opcode for dictionaries with non-int keys
(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET NULLSWAPIFNOT";

const int WRONG_SEQNO = 70;
const int BAD_SIGNATURE = 71;
const int WRONG_MSG_VALUE = 72;
const int ACC_EXISTS = 73;

slice requested_status() inline {
    ;; 0x4 == 0b0100 -> 0b01 == 1
    return "4"s.first_bits(2);
}

(int, int, int, cell) load_data() {
    var data = get_data().begin_parse();
    int seqno = data~load_uint(32);
    int provider = data~load_uint(256);
    int fee = data~load_grams();
    cell dictionary = data~load_dict();
    data.end_parse();
    return (seqno, provider, fee, dictionary);
}

() save_data(int seqno, int provider, int fee, cell account_data) impure inline {
    set_data(
        begin_cell()
            .store_uint(seqno, 32)
            .store_uint(provider, 256)
            .store_grams(fee)
            .store_dict(account_data)
            .end_cell()
    );
}

() recv_external(slice in_msg) impure {
    int operation = in_msg~load_uint(4);
    int msg_seqno = in_msg~load_uint(32);
    var (stored_seqno, provider, fee, cell accounts_data) = load_data();
    throw_unless(WRONG_SEQNO, stored_seqno == msg_seqno);

    slice signature = in_msg~load_bits(512);
    slice args = in_msg~load_ref().begin_parse();
    in_msg.end_parse();

    int data_hash = string_hash(args);
    throw_unless(BAD_SIGNATURE, check_signature(data_hash, signature, provider));

    accept_message();

    if (operation == 0) { ;; update params    
        provider = args~load_uint(256);
        fee = args~load_uint(120);
        args.end_parse();

    }

    if (operation == 1) { ;; kyc provider acc status set
        slice parsed_account = args~load_bits(1008);
        int status = args~load_uint(8);
        args.end_parse();
        accounts_data~dict_set(
            1008,
            parsed_account,
            begin_cell().store_uint(status, 2).end_cell().begin_parse()
        );
    }

    save_data(stored_seqno + 1, provider, fee, accounts_data);
    return ();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    var (stored_seqno, provider, fee, cell accounts_data) = load_data();
    int operation = in_msg_body~load_uint(4);
    if (operation == 0) { ;; request KYC check for account
        throw_if(WRONG_MSG_VALUE, msg_value != fee);
        slice account = in_msg_body~load_bits(1008);
        (_, int existed) = accounts_data.dict_get?(1008, account);
        throw_if(ACC_EXISTS, existed);
        accounts_data~dict_set(1008, account, requested_status());
        save_data(stored_seqno, provider, fee, accounts_data);
        account~dump();
    }
    return ();
}

int get_account_state(slice account) method_id {
	var (_, _, _, accounts_data) = load_data();
	(slice status, int success) = accounts_data.dict_get?(1008, account);
    if (success) {
        return status~load_uint(2);
    }
	return 0;
}

int get_seqno() method_id {
    var (seqno, _, _, _) = load_data();
    return seqno;
}

int get_provider() method_id {
    var (_, provider, _, _) = load_data();
    return provider;
}

int get_fee() method_id {
    var (_, _, fee, _) = load_data();
    return fee;
}

int accounts_data_is_empty() method_id {
    var (_, _, _, accounts_data) = load_data();
    return dict_empty?(accounts_data);
}

cell get_accounts_data() method_id {
    var (_, _, _, accounts_data) = load_data();
    return accounts_data;
}