(int, int, int, cell) load_data() {
    var data = get_data().begin_parse();
    int seqno = data~load_uint(32);
    int provider = data~load_uint(256);
    int fee = data~load_grams();
    cell accounts_data = data.slice_bits() == 0 ? new_dict() : data~load_dict();
    data.end_parse();
    return (seqno, provider, fee, accounts_data);
}

() save_data(int seqno, int provider, int fee, cell account_data) impure inline {
    set_data(
        begin_cell()
            .store_uint(seqno, 32)
            .store_uint(provider, 256)
            .store_grams(fee)
            .store_dict(account_data)
            .end_cell()
    );
}

() recv_external(slice in_msg) impure {
    int operation = in_msg~load_uint(4);
    int msg_seqno = in_msg~load_uint(32);
    var (stored_seqno, provider, fee, accounts_data) = load_data();
    throw_unless(32, stored_seqno == msg_seqno);

    if (operation == 0) { ;; update params
        ;; some signature check
        ;; updating params in storage
        return ();
    }

    if (operation == 1) { ;; request for account check
        int parsed_account = in_msg~load_uint(256);
        in_msg.end_parse();

        ;; maybe should udict_get here for check and udict_add after accept_message?
        int success = accounts_data~udict_add?(256, parsed_account, "P"); ;; Processing
        throw_unless(33, success); ;; already in dictionary

        accept_message();
        ;; fees should be somewhere here
    }

    if (operation == 2) { ;; kyc provider acc status set
        ;; some signature check
        int parsed_account = in_msg~load_uint(256);
        int status = in_msg~load_uint(4);
        throw_if(32, status > 1);
        in_msg.end_parse();

        slice new_status = status == 0 ? "D" : "A"; ;; Declined or Approved
        ;; maybe should udict_get here for check and udict_replace after accept_message?
        int success = accounts_data~udict_replace?(256, parsed_account, new_status);
        throw_unless(34, success); ;; unknown account

        accept_message();
    }

    save_data(stored_seqno + 1, provider, fee, accounts_data);
    return ();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    return ();
}

slice get_accounts_status(slice account) method_id {
    (int parsed_account, _) = account.parse_std_addr();
	var (_, _, _, accounts_data) = load_data();
	(slice status, int success) = accounts_data.udict_get?(256, parsed_account);
	throw_unless(98, success);

	return status;
}

int get_seqno() method_id {
    var (seqno, _, _, _) = load_data();
    return seqno;
}

int get_provider() method_id {
    var (_, provider, _, _) = load_data();
    return provider;
}

int get_fee() method_id {
    var (_, _, fee, _) = load_data();
    return fee;
}

cell get_accounts_data() method_id {
    var (_, _, _, accounts_data) = load_data();
    return accounts_data;
}