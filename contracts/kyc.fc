(int, int, int, cell) load_data() {
    var data = get_data().begin_parse();
    int seqno = data~load_uint(32);
    int provider = data~load_uint(256);
    int fee = data~load_grams();
    cell dictionary = new_dict();
    if (~ slice_empty?(data)) {
        dictionary = data~load_dict();
    }
    data.end_parse();
    return (seqno, provider, fee, dictionary);
}

() save_data(int seqno, int provider, int fee, cell account_data) impure inline {
    set_data(
        begin_cell()
            .store_uint(seqno, 32)
            .store_uint(provider, 256)
            .store_grams(fee)
            .store_dict(account_data)
            .end_cell()
    );
}

() recv_external(slice in_msg) impure {
    int operation = in_msg~load_uint(4);
    int msg_seqno = in_msg~load_uint(32);
    var (stored_seqno, provider, fee, cell accounts_data) = load_data();
    throw_unless(32, stored_seqno == msg_seqno);

    if (operation == 0) { ;; update params
        slice msg_data = in_msg~load_bits(376);
        slice signature = in_msg~load_bits(512);
        in_msg.end_parse();
        int msg_hash = slice_hash(msg_data);
        throw_unless(33, check_signature(msg_hash, signature, provider));
        accept_message();
    
        int new_provider = msg_data~load_uint(256);
        int new_fee = msg_data~load_grams();


        save_data(stored_seqno + 1, new_provider, new_fee, accounts_data);
        return ();

    } elseif (operation == 1) { ;; kyc provider acc status set
        int parsed_account = in_msg~load_uint(256);
        int status = in_msg~load_uint(4);
;;         throw_if(32, status > 1);
        in_msg.end_parse();

        (_, int in_dict) = accounts_data.udict_get?(256, parsed_account);
        throw_unless(34, in_dict == 0); ;; unknown account.
        accept_message();

        slice st = begin_cell().store_int(status, 8).end_cell().begin_parse();
        accounts_data~udict_set( 256, parsed_account, st);
    }

    save_data(stored_seqno + 1, provider, fee, accounts_data);
    return ();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    var (stored_seqno, provider, fee, cell accounts_data) = load_data();
    int operation = in_msg_body~load_uint(4);
    if (operation == 0) { ;; request KYC check for account
        throw_if(97, msg_value != fee);
        int account = in_msg_body~load_uint(256);
        (_, int existed) = accounts_data.udict_get?(256, account);
        throw_if(96, existed);
        slice val = begin_cell().store_uint(1, 8).end_cell().begin_parse();
        accounts_data~udict_set(256, account, val);
        save_data(stored_seqno, provider, fee, accounts_data);
    }
    return ();
}

int get_account_state(int account) method_id {
	var (_, _, _, accounts_data) = load_data();
	(slice status, int success) = accounts_data.udict_get?(256, account);
	throw_unless(98, success);
	return status~load_uint(8);
}

int get_seqno() method_id {
    var (seqno, _, _, _) = load_data();
    return seqno;
}

int get_provider() method_id {
    var (_, provider, _, _) = load_data();
    return provider;
}

int get_fee() method_id {
    var (_, _, fee, _) = load_data();
    return fee;
}

cell get_accounts_data() method_id {
    var (_, _, _, accounts_data) = load_data();
    return accounts_data;
}